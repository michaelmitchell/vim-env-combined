# Function
snippet fun
	function ${1:function_name}(${2:argument}) {
		${3:// body...}
	}
# Anonymous Function
snippet f
	function (${1}) {
		${3}
	}${2:;}
# Immediate function
snippet (f
	(function (${1}) {
		${3}
	}(${2}));
# if
snippet if
	if (${1:true}) {
		${2}
	}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${3}
	}
# tertiary conditional
snippet if?
	${1:/* condition */} ? ${2:a} : ${3:b}
# for (...) {...}
snippet for
	for (${1:i} = 0; $1 < ${2:len}; $1 += 1) {
		${3:}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (${1:i} = ${2:len} - 1; $2 >= 0; $2 -= 1) {
		${3:}
	}
# while (...) {...}
snippet while
	while (${1:/* condition */}) {
		${2}
	}
# try
snippet try
	try {
		${1}
	}
	catch (${2:e}) {
		${3:/* handle error */}
	}
# do...while
snippet do
	do {
		${2}
	}
	while (${1:/* condition */});
# Object Method
snippet :f
	${1:method}: function (${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function () {${3}}${2}, ${1:10});
# console.log
snippet cl
	console.log(${1});
# return
snippet return
	return ${1:result}
# for (property in object ) { ... }
snippet forin
	for (${1:prop} in ${2:Things}) {
		${3:$2[$1]}
	}
# docstring
snippet /**
	/**
	 * ${1:description}
	 *
	 */
snippet @param
	@param {${1:type}} ${2:name} ${3:description}
snippet @return
	@return {${1:type}} ${2:description}
# JSON.parse
snippet jsonp
	JSON.parse(${1:jstr});
# JSON.stringify
snippet jsons
	JSON.stringify(${1:object});
